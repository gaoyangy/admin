{"version":3,"sources":["webpack:///static/js/7.7847d6dda317635d6940.js","webpack:///./node_modules/_base64-js@1.2.1@base64-js/index.js","webpack:///./node_modules/_isarray@1.0.0@isarray/index.js","webpack:///./src/components/UploadExcel/index.vue","webpack:///src/components/UploadExcel/index.vue","webpack:///./src/components/UploadExcel/index.vue?9e2d","webpack:///src/views/excel/uploadExcel.vue","webpack:///./src/views/excel/uploadExcel.vue?5d97","webpack:///./src/views/excel/uploadExcel.vue","webpack:///./node_modules/_buffer@4.9.1@buffer/index.js","webpack:///./node_modules/_ieee754@1.1.8@ieee754/index.js","webpack:///./src/components/UploadExcel/index.vue?6ae6","webpack:///./src/components/UploadExcel/index.vue?8f29"],"names":["webpackJsonp","/eEn","module","exports","__webpack_require__","placeHoldersCount","b64","len","length","Error","byteLength","toByteArray","i","l","tmp","placeHolders","arr","Arr","L","revLookup","charCodeAt","tripletToBase64","num","lookup","encodeChunk","uint8","start","end","output","push","join","fromByteArray","extraBytes","parts","len2","Uint8Array","Array","code","0","1","2","5RIO","toString","isArray","call","7/0S","__webpack_exports__","injectStyle","ssrContext","Object","defineProperty","value","xlsx","xlsx_default","n","UploadExcel","data","loading","excelData","header","results","methods","generateDate","_ref","this","$emit","handleUpload","document","getElementById","click","handkeFileChange","e","_this","files","target","itemFile","reader","FileReader","onload","result","fixedData","fixdata","workbook","a","read","btoa","type","firstSheetName","SheetNames","worksheet","Sheets","get_header_row","utils","sheet_to_json","readAsArrayBuffer","o","w","String","fromCharCode","apply","slice","sheet","headers","range","decode_range","C","R","s","r","c","cell","encode_cell","hdr","t","format_cell","render","_vm","_h","$createElement","_c","_self","attrs","on","_v","staticClass","id","accept","change","staticRenderFns","esExports","components_UploadExcel","normalizeComponent","__vue_styles__","Component","src_components_UploadExcel","uploadExcel","name","components","UploadExcelComponent","tableData","tableHeader","selected","uploadExcel_render","on-selected-file","staticStyle","width","margin-top","border","highlight-current-row","_l","item","key","prop","label","uploadExcel_staticRenderFns","uploadExcel_esExports","excel_uploadExcel","uploadExcel_normalizeComponent","uploadExcel_Component","7xR8","global","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","prototype","arg","encodingOrOffset","allocUnsafe","from","TypeError","ArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","undefined","checked","string","isEncoding","actual","write","fromArrayLike","array","byteOffset","obj","isBuffer","copy","buffer","isnan","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","m","bidirectionalIndexOf","val","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","buf","indexSize","readUInt16BE","arrLength","valLength","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64","Math","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","ret","out","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","replace","INVALID_BASE64_RE","trim","units","Infinity","leadSurrogate","byteArray","hi","lo","src","dst","INSPECT_MAX_BYTES","foo","subarray","poolSize","_augment","Symbol","species","configurable","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","pos","swap16","swap32","swap64","arguments","equals","inspect","match","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","OId0","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","NaN","rt","abs","log","LN2","VtKK","version","sources","names","mappings","file","sourcesContent","sourceRoot","nIoj","content","locals"],"mappings":"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","file":"static/js/7.7847d6dda317635d6940.js","sourcesContent":["webpackJsonp([7],{\n\n/***/ \"/eEn\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n/***/ }),\n\n/***/ 0:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 1:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 2:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ \"5RIO\":\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n/***/ }),\n\n/***/ \"7/0S\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// EXTERNAL MODULE: ./node_modules/_xlsx@0.11.13@xlsx/xlsx.js\nvar xlsx = __webpack_require__(\"MoCl\");\nvar xlsx_default = /*#__PURE__*/__webpack_require__.n(xlsx);\n\n// CONCATENATED MODULE: ./node_modules/_babel-loader@7.1.2@babel-loader/lib!./node_modules/_vue-loader@13.5.0@vue-loader/lib/selector.js?type=script&index=0!./src/components/UploadExcel/index.vue\n\n\n\n\n/* harmony default export */ var UploadExcel = ({\n  data: function data() {\n    return {\n      loading: false,\n      excelData: {\n        header: null,\n        results: null\n      }\n    };\n  },\n\n  methods: {\n    generateDate: function generateDate(_ref) {\n      var header = _ref.header,\n          results = _ref.results;\n\n      this.excelData.header = header;\n      this.excelData.results = results;\n      this.loading = false;\n      this.$emit('on-selected-file', this.excelData);\n    },\n    handleUpload: function handleUpload() {\n      document.getElementById('excel-upload-input').click();\n    },\n    handkeFileChange: function handkeFileChange(e) {\n      var _this = this;\n\n      this.loading = true;\n      var files = e.target.files;\n      var itemFile = files[0];\n      var reader = new FileReader();\n      reader.onload = function (e) {\n        var data = e.target.result;\n        var fixedData = _this.fixdata(data);\n        var workbook = xlsx_default.a.read(btoa(fixedData), { type: 'base64' });\n        var firstSheetName = workbook.SheetNames[0];\n        var worksheet = workbook.Sheets[firstSheetName];\n        var header = _this.get_header_row(worksheet);\n        var results = xlsx_default.a.utils.sheet_to_json(worksheet);\n        _this.generateDate({ header: header, results: results });\n      };\n      reader.readAsArrayBuffer(itemFile);\n    },\n    fixdata: function fixdata(data) {\n      var o = '';\n      var l = 0;\n      var w = 10240;\n      for (; l < data.byteLength / w; ++l) {\n        o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));\n      }o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));\n      return o;\n    },\n    get_header_row: function get_header_row(sheet) {\n      var headers = [];\n      var range = xlsx_default.a.utils.decode_range(sheet['!ref']);\n      var C = void 0;\n      var R = range.s.r;\n      for (C = range.s.c; C <= range.e.c; ++C) {\n        var cell = sheet[xlsx_default.a.utils.encode_cell({ c: C, r: R })];\n        var hdr = 'UNKNOWN ' + C;\n        if (cell && cell.t) hdr = xlsx_default.a.utils.format_cell(cell);\n        headers.push(hdr);\n      }\n      return headers;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/_vue-loader@13.5.0@vue-loader/lib/template-compiler?{\"id\":\"data-v-a295038a\",\"hasScoped\":true,\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.5.0@vue-loader/lib/selector.js?type=template&index=0!./src/components/UploadExcel/index.vue\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('el-button',{attrs:{\"loading\":_vm.loading,\"type\":\"primary\"},on:{\"click\":_vm.handleUpload}},[_vm._v(\"select excel file\")]),_vm._v(\" \"),_c('input',{staticClass:\"c-hide\",attrs:{\"id\":\"excel-upload-input\",\"type\":\"file\",\"accept\":\".xlsx, .xls\"},on:{\"change\":_vm.handkeFileChange}})],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ var components_UploadExcel = (esExports);\n// CONCATENATED MODULE: ./src/components/UploadExcel/index.vue\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"nIoj\")\n}\nvar normalizeComponent = __webpack_require__(\"/Xao\")\n/* script */\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-a295038a\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  UploadExcel,\n  components_UploadExcel,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ var src_components_UploadExcel = (Component.exports);\n\n// CONCATENATED MODULE: ./node_modules/_babel-loader@7.1.2@babel-loader/lib!./node_modules/_vue-loader@13.5.0@vue-loader/lib/selector.js?type=script&index=0!./src/views/excel/uploadExcel.vue\n\n\n\n\n/* harmony default export */ var uploadExcel = ({\n  name: 'uploadExcel',\n  components: { UploadExcelComponent: src_components_UploadExcel },\n  data: function data() {\n    return {\n      tableData: [],\n      tableHeader: []\n    };\n  },\n\n  methods: {\n    selected: function selected(data) {\n      this.tableData = data.results;\n      this.tableHeader = data.header;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/_vue-loader@13.5.0@vue-loader/lib/template-compiler?{\"id\":\"data-v-78611b05\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.5.0@vue-loader/lib/selector.js?type=template&index=0!./src/views/excel/uploadExcel.vue\nvar uploadExcel_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app-container\"},[_c('upload-excel-component',{on:{\"on-selected-file\":_vm.selected}}),_vm._v(\" \"),_c('el-table',{staticStyle:{\"width\":\"100%\",\"margin-top\":\"20px\"},attrs:{\"data\":_vm.tableData,\"border\":\"\",\"highlight-current-row\":\"\"}},_vm._l((_vm.tableHeader),function(item){return _c('el-table-column',{key:item,attrs:{\"prop\":item,\"label\":item}})}))],1)}\nvar uploadExcel_staticRenderFns = []\nvar uploadExcel_esExports = { render: uploadExcel_render, staticRenderFns: uploadExcel_staticRenderFns }\n/* harmony default export */ var excel_uploadExcel = (uploadExcel_esExports);\n// CONCATENATED MODULE: ./src/views/excel/uploadExcel.vue\nvar uploadExcel_normalizeComponent = __webpack_require__(\"/Xao\")\n/* script */\n\n/* template */\n\n/* template functional */\nvar uploadExcel___vue_template_functional__ = false\n/* styles */\nvar uploadExcel___vue_styles__ = null\n/* scopeId */\nvar uploadExcel___vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar uploadExcel___vue_module_identifier__ = null\nvar uploadExcel_Component = uploadExcel_normalizeComponent(\n  uploadExcel,\n  excel_uploadExcel,\n  uploadExcel___vue_template_functional__,\n  uploadExcel___vue_styles__,\n  uploadExcel___vue_scopeId__,\n  uploadExcel___vue_module_identifier__\n)\n\n/* harmony default export */ var views_excel_uploadExcel = __webpack_exports__[\"default\"] = (uploadExcel_Component.exports);\n\n\n/***/ }),\n\n/***/ \"7xR8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(\"/eEn\")\nvar ieee754 = __webpack_require__(\"OId0\")\nvar isArray = __webpack_require__(\"5RIO\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"br9k\")))\n\n/***/ }),\n\n/***/ \"OId0\":\n/***/ (function(module, exports) {\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n/***/ }),\n\n/***/ \"VtKK\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"BkJT\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \"#excel-upload-input[data-v-a295038a]{display:none;z-index:-9999}\", \"\", {\"version\":3,\"sources\":[\"/Users/alien/Desktop/admin/admin/src/components/UploadExcel/index.vue\"],\"names\":[],\"mappings\":\"AACA,qCACE,aAAc,AACd,aAAe,CAChB\",\"file\":\"index.vue\",\"sourcesContent\":[\"\\n#excel-upload-input[data-v-a295038a]{\\n  display: none;\\n  z-index: -9999;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"nIoj\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"VtKK\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"8bSs\")(\"71737100\", content, true);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/7.7847d6dda317635d6940.js","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_base64-js@1.2.1@base64-js/index.js\n// module id = /eEn\n// module chunks = 3 7 51 52","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_isarray@1.0.0@isarray/index.js\n// module id = 5RIO\n// module chunks = 3 7 51 52","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.5.0@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-a295038a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!postcss-loader?{\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.5.0@vue-loader/lib/selector?type=styles&index=0!./index.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/_vue-loader@13.5.0@vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/_vue-loader@13.5.0@vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/_vue-loader@13.5.0@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-a295038a\\\",\\\"hasScoped\\\":true,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/_vue-loader@13.5.0@vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-a295038a\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/UploadExcel/index.vue\n// module id = null\n// module chunks = ","<template>\n  <div>\n    <el-button :loading=\"loading\" type=\"primary\" @click=\"handleUpload\">select excel file</el-button>\n    <input id=\"excel-upload-input\" type=\"file\" accept=\".xlsx, .xls\" class=\"c-hide\" @change=\"handkeFileChange\">\n  </div>\n</template>\n\n<script>\nimport XLSX from 'xlsx'\n\nexport default {\n  data() {\n    return {\n      loading: false,\n      excelData: {\n        header: null,\n        results: null\n      }\n    }\n  },\n  methods: {\n    generateDate({ header, results }) {\n      this.excelData.header = header\n      this.excelData.results = results\n      this.loading = false\n      this.$emit('on-selected-file', this.excelData)\n    },\n    handleUpload() {\n      document.getElementById('excel-upload-input').click()\n    },\n    handkeFileChange(e) {\n      this.loading = true\n      const files = e.target.files\n      const itemFile = files[0] // only use files[0]\n      const reader = new FileReader()\n      reader.onload = e => {\n        const data = e.target.result\n        const fixedData = this.fixdata(data)\n        const workbook = XLSX.read(btoa(fixedData), { type: 'base64' })\n        const firstSheetName = workbook.SheetNames[0]\n        const worksheet = workbook.Sheets[firstSheetName]\n        const header = this.get_header_row(worksheet)\n        const results = XLSX.utils.sheet_to_json(worksheet)\n        this.generateDate({ header, results })\n      }\n      reader.readAsArrayBuffer(itemFile)\n    },\n    fixdata(data) {\n      let o = ''\n      let l = 0\n      const w = 10240\n      for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)))\n      o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)))\n      return o\n    },\n    get_header_row(sheet) {\n      const headers = []\n      const range = XLSX.utils.decode_range(sheet['!ref'])\n      let C\n      const R = range.s.r /* start in the first row */\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\n        var cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })] /* find the cell in the first row */\n        var hdr = 'UNKNOWN ' + C // <-- replace with your desired default\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\n        headers.push(hdr)\n      }\n      return headers\n    }\n  }\n}\n</script>\n\n<style scoped>\n#excel-upload-input{\n  display: none;\n  z-index: -9999;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/UploadExcel/index.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('el-button',{attrs:{\"loading\":_vm.loading,\"type\":\"primary\"},on:{\"click\":_vm.handleUpload}},[_vm._v(\"select excel file\")]),_vm._v(\" \"),_c('input',{staticClass:\"c-hide\",attrs:{\"id\":\"excel-upload-input\",\"type\":\"file\",\"accept\":\".xlsx, .xls\"},on:{\"change\":_vm.handkeFileChange}})],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.5.0@vue-loader/lib/template-compiler?{\"id\":\"data-v-a295038a\",\"hasScoped\":true,\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.5.0@vue-loader/lib/selector.js?type=template&index=0!./src/components/UploadExcel/index.vue\n// module id = null\n// module chunks = ","<template>\n  <div class=\"app-container\">\n    <upload-excel-component @on-selected-file='selected'></upload-excel-component>\n    <el-table :data=\"tableData\" border highlight-current-row style=\"width: 100%;margin-top:20px;\">\n      <el-table-column v-for='item of tableHeader' :prop=\"item\" :label=\"item\" :key='item'>\n      </el-table-column>\n    </el-table>\n  </div>\n</template>\n\n<script>\nimport UploadExcelComponent from 'components/UploadExcel/index.vue'\n\nexport default {\n  name: 'uploadExcel',\n  components: { UploadExcelComponent },\n  data() {\n    return {\n      tableData: [],\n      tableHeader: []\n    }\n  },\n  methods: {\n    selected(data) {\n      this.tableData = data.results\n      this.tableHeader = data.header\n    }\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/views/excel/uploadExcel.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app-container\"},[_c('upload-excel-component',{on:{\"on-selected-file\":_vm.selected}}),_vm._v(\" \"),_c('el-table',{staticStyle:{\"width\":\"100%\",\"margin-top\":\"20px\"},attrs:{\"data\":_vm.tableData,\"border\":\"\",\"highlight-current-row\":\"\"}},_vm._l((_vm.tableHeader),function(item){return _c('el-table-column',{key:item,attrs:{\"prop\":item,\"label\":item}})}))],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.5.0@vue-loader/lib/template-compiler?{\"id\":\"data-v-78611b05\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.5.0@vue-loader/lib/selector.js?type=template&index=0!./src/views/excel/uploadExcel.vue\n// module id = null\n// module chunks = ","var normalizeComponent = require(\"!../../../node_modules/_vue-loader@13.5.0@vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/_vue-loader@13.5.0@vue-loader/lib/selector?type=script&index=0!./uploadExcel.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/_vue-loader@13.5.0@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-78611b05\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/_vue-loader@13.5.0@vue-loader/lib/selector?type=template&index=0!./uploadExcel.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/excel/uploadExcel.vue\n// module id = null\n// module chunks = ","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_buffer@4.9.1@buffer/index.js\n// module id = 7xR8\n// module chunks = 3 7 51 52","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_ieee754@1.1.8@ieee754/index.js\n// module id = OId0\n// module chunks = 3 7 51 52","exports = module.exports = require(\"../../../node_modules/_css-loader@0.28.7@css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \"#excel-upload-input[data-v-a295038a]{display:none;z-index:-9999}\", \"\", {\"version\":3,\"sources\":[\"/Users/alien/Desktop/admin/admin/src/components/UploadExcel/index.vue\"],\"names\":[],\"mappings\":\"AACA,qCACE,aAAc,AACd,aAAe,CAChB\",\"file\":\"index.vue\",\"sourcesContent\":[\"\\n#excel-upload-input[data-v-a295038a]{\\n  display: none;\\n  z-index: -9999;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_css-loader@0.28.7@css-loader?{\"minimize\":true,\"sourceMap\":true}!./node_modules/_vue-loader@13.5.0@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-a295038a\",\"scoped\":true,\"hasInlineConfig\":false}!./node_modules/_postcss-loader@2.0.9@postcss-loader/lib?{\"sourceMap\":true}!./node_modules/_vue-loader@13.5.0@vue-loader/lib/selector.js?type=styles&index=0!./src/components/UploadExcel/index.vue\n// module id = VtKK\n// module chunks = 7","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/_css-loader@0.28.7@css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.5.0@vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-a295038a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/_postcss-loader@2.0.9@postcss-loader/lib/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.5.0@vue-loader/lib/selector.js?type=styles&index=0!./index.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/_vue-style-loader@3.0.3@vue-style-loader/lib/addStylesClient.js\")(\"71737100\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\"omit\":1,\"remove\":true}!./node_modules/_vue-style-loader@3.0.3@vue-style-loader!./node_modules/_css-loader@0.28.7@css-loader?{\"minimize\":true,\"sourceMap\":true}!./node_modules/_vue-loader@13.5.0@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-a295038a\",\"scoped\":true,\"hasInlineConfig\":false}!./node_modules/_postcss-loader@2.0.9@postcss-loader/lib?{\"sourceMap\":true}!./node_modules/_vue-loader@13.5.0@vue-loader/lib/selector.js?type=styles&index=0!./src/components/UploadExcel/index.vue\n// module id = nIoj\n// module chunks = 7"],"sourceRoot":""}